<?php

/**
 * @file
 * Tests for acquia_qa.module.
 */
class AcquiaQACommentTest extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Acquia QA Test',
      'description' => 'Set of Tests to be used in Acquia QA Training',
      'group' => 'Acquia'
    );
  }

  function setUp() {
    parent::setUp('comment');

    $this->privileged_user = $this->drupalCreateUser(array('access content', 'post comments', 'create article content'));
    $this->lessprivileged_user = $this->drupalCreateUser(array('access content'));
    $this->adminprivileged_user = $this->drupalCreateUser(array('access content', 'administer comments', 'create article content'));
    $this->drupalLogin($this->privileged_user);
    $this->node = $this->drupalCreateNode(array('title' => 'Hello node',
      'type' => 'article'));
    $this->drupalLogout();
  }

  /**
   * Checks current page for specified comment.
   *
   * @param object $comment Comment object.
   * @param boolean $reply The comment is a reply to another comment.
   * @return boolean Comment found.
   */
  function commentExists($comment, $reply = FALSE) {
    if ($comment && is_object($comment)) {
      $regex = '/' . ($reply ? '<div class="indented">(.*?)' : '');
      $regex .= '<a id="comment-' . $comment->id . '"(.*?)'; // Comment anchor.
      $regex .= '<div(.*?)'; // Begin in comment div.
      $regex .= $comment->subject . '(.*?)'; // Match subject.
      $regex .= $comment->comment . '(.*?)'; // Match comment.
      $regex .= '/s';

      return (boolean) preg_match($regex, $this->drupalGetContent());
    }
    else {
      return FALSE;
    }
  }

  /**
   * Delete comment.
   *
   * @param object $comment
   *   Comment to delete.
   */
  function deleteComment($comment) {
    $this->drupalPost('comment/' . $comment->id . '/delete', array(), t('Delete'));
    $this->assertText(t('The comment and all its replies have been deleted.'), 'Comment deleted.');
  }

  /**
   * Test Posting of comments
   */
  function testPostingComments() {

    /**
     *  Login as a user who is allowed to (authenticated)
     *  Post the comment
     *  Get the comment ID from the URL
     *  Do a lookup in the DB using comment_load() to make sure it is there.
     */
    
    $this->drupalLogin($this->privileged_user);
    $node = $this->node;
    $this->drupalGet('node/' . $node->nid);
    $this->assertText('Add new comment', 'User should  be shown comment form');

    // Create the comment.
    $langcode = LANGUAGE_NONE;
    $edit = array();
    $edit['comment_body[' . $langcode . '][0][value]'] = $this->randomName(16);;
    $edit['subject'] = $this->randomName(8);;
    $this->drupalPost(NULL, $edit, t('Save'));
    
    //Get the id of the comment
    $match = array();
    // Get comment ID
    preg_match('/#comment-([0-9]+)/', $this->getURL(), $match);
    if (isset($match[1])) {
      $comment = (object) array('id' => $match[1], 'subject' => $subject, 'comment' => $comment);
    }
    
    //Assert to see if the comment is found on the page
    //$this->drupalGet('node/' . $node->nid);
    //$this->assertTrue($this->commentExists($comment), 'Comment appears on page 1.');
    //OR
    //Check the comment through a comment_load
    $comment_loaded = comment_load($comment->id);
    $this->assertTrue($this->commentExists($comment_loaded), 'Comment found.');


    $this->drupalLogout();
  }

  /**
   * Test function to check delete permissions
   */
  function testDeletingComment() {

    /**
     *  Post comment
     *  Get comment ID
     *  run comment_load() and make sure it's there
     *  Delete the comment (via the form) (leave the helper, it will be too hard to write on their own).
     *  run comment_load() and make sure it isn't there.
     */
    //Login as privileged user to make the comment
    $this->drupalLogin($this->privileged_user);

    $node = $this->node;

    $this->drupalGet('node/' . $node->nid);
    $langcode = LANGUAGE_NONE;
    $edit = array();
    $edit['comment_body[' . $langcode . '][0][value]'] = $this->randomName(16);
    $edit['subject'] = $this->randomName(8);;
    $this->drupalPost(NULL, $edit, t('Save'));
    $match = array();
    // Get comment ID
    preg_match('/#comment-([0-9]+)/', $this->getURL(), $match);
    if (isset($match[1])) {
      $comment =  (object) array('id' => $match[1]);
    }
    $comment_loaded = comment_load($comment->id);
    $this->assertTrue($this->commentExists($comment_loaded), 'Comment found.');


    //Login as comment administrator
    $this->drupalLogin($this->adminprivileged_user);
    $this->deleteComment($comment);
    $this->assertFalse($this->commentExists($comment_loaded), 'Comment found.');
    $this->drupalLogout();
  }

}
