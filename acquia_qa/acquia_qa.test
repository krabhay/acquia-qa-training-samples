<?php

/**
 * @file
 * Tests for acquia_qa.module.
 */

class AcquiaQACommentTest extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Acquia QA Test',
      'description' => 'Set of Tests to be used in Acquia QA Training',
      'group' => 'Acquia'
    );
  }

  function setUp() {
    parent::setUp('comment');

    $this->privileged_user = $this->drupalCreateUser(array('access content', 'post comments', 'create article content'));
    $this->lessprivileged_user = $this->drupalCreateUser(array('access content'));
    $this->adminprivileged_user = $this->drupalCreateUser(array('access content', 'administer comments', 'create article content'));
    $this->drupalLogin($this->privileged_user);
    $this->node = $this->drupalCreateNode(array('title' => 'Hello node',
      'type' => 'article'));
    $this->drupalLogout();
  }

  /**
   * Post comment.
   *
   * @param $node
   *   Node to post comment on.
   * @param $comment
   *   Comment body.
   * @param $subject
   *   Comment subject.
   */
  function postComment($node, $comment, $subject = '') {
    $this->drupalGet('node/' . $node->nid);
    $langcode = LANGUAGE_NONE;
    $edit = array();
    $edit['comment_body[' . $langcode . '][0][value]'] = $comment;
    $edit['subject'] = $subject;
    $this->drupalPost(NULL, $edit, t('Save'));

    $match = array();
    // Get comment ID
    preg_match('/#comment-([0-9]+)/', $this->getURL(), $match);
    if (isset($match[1])) {
      return (object) array('id' => $match[1], 'subject' => $subject, 'comment' => $comment);
    }
  }

  /**
   * Checks current page for specified comment.
   *
   * @param object $comment Comment object.
   * @param boolean $reply The comment is a reply to another comment.
   * @return boolean Comment found.
   */
  function commentExists($comment, $reply = FALSE) {
    if ($comment && is_object($comment)) {
      $regex = '/' . ($reply ? '<div class="indented">(.*?)' : '');
      $regex .= '<a id="comment-' . $comment->id . '"(.*?)'; // Comment anchor.
      $regex .= '<div(.*?)'; // Begin in comment div.
      $regex .= $comment->subject . '(.*?)'; // Match subject.
      $regex .= $comment->comment . '(.*?)'; // Match comment.
      $regex .= '/s';

      return (boolean) preg_match($regex, $this->drupalGetContent());
    }
    else {
      return FALSE;
    }
  }

  /**
   * Set comment setting for article content type.
   *
   * @param string $name
   *   Name of variable.
   * @param string $value
   *   Value of variable.
   * @param string $message
   *   Status message to display.
   */
  function setCommentSettings($name, $value, $message) {
    variable_set($name . '_article', $value);
    // Display status message.
    $this->assertTrue(TRUE, $message);
  }

  /**
   * Delete comment.
   *
   * @param object $comment
   *   Comment to delete.
   */
  function deleteComment($comment) {
    $this->drupalPost('comment/' . $comment->id . '/delete', array(), t('Delete'));
    $this->assertText(t('The comment and all its replies have been deleted.'), 'Comment deleted.');
  }

  /**
   * Test Posting of comments
   */
  function testPostingComments() {
    $this->drupalLogin($this->lessprivileged_user);

    $node = $this->node;
    $this->drupalGet('node/' . $node->nid);
    $this->assertNoText('Add new comment', 'User should not be shown comment form');

    $this->drupalLogin($this->privileged_user);
    $node = $this->node;
    $this->drupalGet('node/' . $node->nid);
    $this->assertText('Add new comment', 'User should  be shown comment form');

    // Create three comments.
    $comments = array();
    $comments[] = $this->postComment($node, $this->randomName(), $this->randomName(), TRUE);
    $comments[] = $this->postComment($node, $this->randomName(), $this->randomName(), TRUE);
    $comments[] = $this->postComment($node, $this->randomName(), $this->randomName(), TRUE);
    
    //Set no of comments per page to 5 so that all 3 are available
    $this->setCommentSettings('comment_default_per_page', 5, 'Number of comments per page set to ' . 5 . '.');

    $this->drupalGet('node/' . $node->nid);
    $this->assertTrue($this->commentExists($comments[0]), 'Comment 1 appears on page 1.');
    $this->assertTrue($this->commentExists($comments[1]), 'Comment 2 appears on page 1.');
    $this->assertTrue($this->commentExists($comments[2]), 'Comment 3 appears on page 1.');

    $this->drupalLogout();
  }

  function testDeletingComment() {
    
    //Login as privileged user to make the comment
    $this->drupalLogin($this->privileged_user);

    $node = $this->node;

    $comments = array();
    $comments[] = $this->postComment($node, $this->randomName(), $this->randomName(), TRUE);
    $comments[] = $this->postComment($node, $this->randomName(), $this->randomName(), TRUE);
    $comments[] = $this->postComment($node, $this->randomName(), $this->randomName(), TRUE);

    $this->drupalGet('node/' . $node->nid);
    debug($comments);
    $this->assertLinkByHref('comment/' . $comments[0]->id . '#comment-' . $comments[0]->id, 0, "Comment found");
    $this->assertLinkByHref('comment/' . $comments[1]->id . '#comment-' . $comments[1]->id, 0, "Comment found");
    $this->assertLinkByHref('comment/' . $comments[2]->id . '#comment-' . $comments[2]->id, 0, "Comment found");
    
    $this->drupalLogout();
    
    //Login as comment administrator
    $this->drupalLogin($this->adminprivileged_user);
    
    $this->deleteComment($comments[0]);
    $this->deleteComment($comments[1]);
    $this->deleteComment($comments[2]);
    
    //Make sure the comment (links) are not available after deleting
    $this->assertNoLinkByHref('comment/' . $comments[0]->id . '#comment-' . $comments[0]->id, 0, "Comment found");
    $this->assertNoLinkByHref('comment/' . $comments[1]->id . '#comment-' . $comments[1]->id, 0, "Comment found");
    $this->assertNoLinkByHref('comment/' . $comments[2]->id . '#comment-' . $comments[2]->id, 0, "Comment found");
    
    $this->drupalLogout();
    
  }

//  // Challenge:
//  function testCommentPermissions() {
//    // run the above posting method using different users.
//  }
}